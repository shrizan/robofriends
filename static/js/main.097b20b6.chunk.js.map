{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ComponentErrorBoundry.js","components/Header.js","containers/App.js","Actions.js","Constant.js","Reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","style","height","width","src","concat","CardList","cardComponent","robots","map","robot","components_Card","key","SearchBox","searchChnage","type","placeholder","onChange","Scroll","props","overflowY","border","children","ComponentErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this2","filteredRobots","filter","toLocaleLowerCase","includes","searchField","isPending","Header_Header","SearchBox_SearchBox","onSearchChange","Scroll_Scroll","ComponentErrorBoundry_ComponentErrorBoundry","CardList_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","intialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","middleWares","createLogger","ReduxThunk","store","createStore","applyMiddleware","apply","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.097b20b6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nconst Card = ({id,name,email})=>{\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt={name} style={{height:200,width:200}} src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList =({ robots })=>{\r\n    const cardComponent = robots.map(robot=>{\r\n        const { id, email, name } = robot\r\n        return <Card id={id} name={name} email={email} key={id}/>\r\n    })\r\n    return (\r\n        <div>\r\n            { cardComponent }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {CardList as default}","import React from 'react'\r\n\r\nconst SearchBox =({searchChnage})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange={searchChnage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { SearchBox as default }","import React from 'react'\r\nimport './Scroll.css'\r\nconst Scroll =(props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Scroll as default }","import React, { Component } from 'react'\r\n\r\nexport default class ComponentErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true})\r\n        console.log(error)\r\n        console.log(info)\r\n    }\r\n    \r\n\r\n    render(){\r\n        return this.state.hasError?(<h1>Oops, That is not good</h1>):this.props.children\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component{\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    \r\n\r\n    render(){\r\n        return (<h1 className=\"f1\">Robo Friends</h1>)\r\n    }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from './../components/CardList'\r\nimport SearchBox from './../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from './../components/Scroll'\r\nimport ErrorBoundry from './../components/ComponentErrorBoundry'\r\nimport { setSearchField, requestRobots } from './../Actions'\r\nimport Header from './../components/Header'\r\n\r\n\r\nclass  App extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            robots:[],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render(){\r\n\r\n        const filteredRobots=this.props.robots.filter(robot=>{\r\n            return robot.name.toLocaleLowerCase().includes(this.props.searchField.toLocaleLowerCase())\r\n        })\r\n        return this.props.isPending?<h1>loading....</h1>:\r\n        (\r\n            <div className=\"tc\">\r\n                <Header/>\r\n                <SearchBox searchChnage={this.props.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        searchField:state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\nreturn {\r\n    onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots:()=>dispatch(requestRobots())\r\n}\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App)","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './Constant'\r\n\r\n/**\r\n * @param {String} text \r\n */\r\nexport const setSearchField=(text)=>({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({\r\n        type:REQUEST_ROBOTS_PENDING\r\n    })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            dispatch({\r\n                type:REQUEST_ROBOTS_SUCCESS,\r\n                payload:data\r\n            })\r\n        })\r\n        .catch(error=>{\r\n            dispatch({\r\n                type:REQUEST_ROBOTS_FAILED,\r\n                payload:error\r\n            })\r\n            console.log(error)\r\n        })\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\"\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"","import {\r\nCHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n} from './Constant'\r\n\r\nconst intialStateSearch={\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action)=>{\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return {...state, searchField:action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending:false,\r\n    error:'',\r\n    robots:[]\r\n}\r\n\r\nexport const requestRobots =(state=initialStateRobots,action={})=>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending:true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, isPending:false, robots:action.payload }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, isPending:false, error:action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore,applyMiddleware,combineReducers } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport 'tachyons'\nimport {searchRobots,requestRobots} from './Reducers'\n\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst logger = createLogger()\nconst middleWares = [logger,ReduxThunk]\nconst store = createStore(rootReducer,applyMiddleware(...middleWares))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}